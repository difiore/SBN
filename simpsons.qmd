---
title: "Simpsons"
format:
  html:
    embed-resources: true
    code-overflow: wrap
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    code-summary: "Code hint"
editor_options: 
  chunk_output_type: console
---

```{r}
#| message: false
library(tidyverse)
v <- read_csv("data/simpsonsNodes.csv", col_names = TRUE)
e <- read_csv("data/simpsonsEdges.csv", col_names = TRUE)
# merge info from e and v
edges <- left_join(e, v, by = c("Source" = "Id"))
# drop the "source" and "bio" columns
edges <- select(edges, -c(Source))
# rename "name" as "from"
edges <- rename(edges, from = char_name)
# merge info from edges and v
edges <- left_join(edges, v, by = c("Target" = "Id"))
# drop the "target" and "bio" columns
edges <- select(edges, -c(Target))
# rename "name" as "to"
edges <- rename(edges, to = char_name)
# rename the "type" column
edges <- rename(edges, type = Type, weight = Weight)
# reorder the columns
edges <- select(edges, c("from", "to", "type", "weight"))
edges <- filter(edges, weight > 100)
vertices <- data.frame(
  id = unique(c(edges$from, edges$to)),
  label = unique(c(edges$from, edges$to))
)

library(igraph)
graph <- graph_from_data_frame(
  d = edges,
  vertices = vertices,
  directed = FALSE)
graph
graph <- simplify(graph, remove.loops = TRUE, remove.multiple = TRUE) 
V(graph)$size <- igraph::betweenness(graph) # set size in igraph to betweeness

node_sizes <- V(graph)$size # create a separate vector of node sizes

# plot with {igraph}
plot.igraph(graph, vertex.size =V(graph)$size * 5)
# or
plot.igraph(graph, vertex.size = rescale(node_sizes, 1, 15))

# plot with {visNetwork}
library(visNetwork)
visIgraph(graph, randomSeed = 42) %>%
  visIgraphLayout(layout = "layout_with_kk")

# convert to network object
library(intergraph)
network <- asNetwork(graph)
library(statnet)

# plot with {sna}
gplot(network, gmode = "graph", displaylabels = TRUE, vertex.cex = rescale(node_sizes, 1, 2))

# plot with {network}
plot.network(network, label = network.vertex.names(network), vertex.cex = rescale(node_sizes, 1, 4))
```
